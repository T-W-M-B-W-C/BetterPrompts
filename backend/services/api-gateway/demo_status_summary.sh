#!/bin/bash

# Quick Demo Status Summary

echo "============================================"
echo "BetterPrompts Demo Status Report"
echo "Generated: $(date)"
echo "============================================"
echo ""

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${YELLOW}üê≥ Docker Services Status:${NC}"
echo "----------------------------------------"
docker compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}" | grep -E "(NAME|healthy|unhealthy|starting)"
echo ""

echo -e "${YELLOW}üåê Web Interface:${NC}"
echo "----------------------------------------"
FRONTEND_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 2>/dev/null || echo "000")
if [ "$FRONTEND_CODE" = "200" ]; then
    echo -e "${GREEN}‚úì Frontend accessible at http://localhost:3000${NC}"
else
    echo -e "${RED}‚úó Frontend not responding (HTTP $FRONTEND_CODE)${NC}"
fi
echo ""

echo -e "${YELLOW}üîå Direct Service Endpoints:${NC}"
echo "----------------------------------------"
echo "Intent Classifier: http://localhost:8001"
echo "Technique Selector: http://localhost:8002"
echo "Prompt Generator: http://localhost:8003"
echo "API Gateway: http://localhost:8000"
echo ""

echo -e "${YELLOW}üìä Database Status:${NC}"
echo "----------------------------------------"
TABLE_COUNT=$(docker compose exec -T postgres psql -U betterprompts -d betterprompts -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' ')
echo "Tables created: $TABLE_COUNT"
docker compose exec -T postgres psql -U betterprompts -d betterprompts -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';" 2>/dev/null | grep -E "users|prompts|sessions|api_usage" || echo "No core tables found"
echo ""

echo -e "${YELLOW}üöÄ Demo Readiness Summary:${NC}"
echo "----------------------------------------"
echo -e "${GREEN}‚úì Working Components:${NC}"
echo "  ‚Ä¢ Docker infrastructure running"
echo "  ‚Ä¢ Database connected with tables"
echo "  ‚Ä¢ API Gateway responding"
echo "  ‚Ä¢ Backend services healthy"
echo ""

echo -e "${RED}‚úó Known Issues:${NC}"
echo "  ‚Ä¢ Authentication flow has schema mismatches"
echo "  ‚Ä¢ Direct service endpoints return 404 (routing issue)"
echo "  ‚Ä¢ Frontend may need restart"
echo ""

echo -e "${YELLOW}üìù Quick Demo Script:${NC}"
echo "----------------------------------------"
echo "1. Show architecture diagram"
echo "2. Display running services: docker compose ps"
echo "3. Show frontend at http://localhost:3000"
echo "4. Demonstrate API Gateway health: curl http://localhost/api/v1/health"
echo "5. Show monitoring at http://localhost:3001 (Grafana)"
echo "6. Explain the prompt enhancement flow"
echo ""

echo -e "${YELLOW}üõ†Ô∏è Emergency Fixes:${NC}"
echo "----------------------------------------"
echo "# If frontend is down:"
echo "docker compose restart frontend"
echo ""
echo "# If you need to create a test user manually:"
echo "docker compose exec postgres psql -U betterprompts -d betterprompts"
echo ""
echo "# View logs for any service:"
echo "docker compose logs -f [service-name]"
echo ""

echo -e "${YELLOW}üí° Demo Tips:${NC}"
echo "----------------------------------------"
echo "‚Ä¢ Focus on the architecture and vision"
echo "‚Ä¢ Show the running infrastructure"
echo "‚Ä¢ Explain the ML pipeline readiness"
echo "‚Ä¢ Emphasize the scalability design"
echo "‚Ä¢ Use Grafana to show monitoring capability"
echo ""