# Cost Monitoring and Alerting Configuration
# Tracks resource usage and costs across the cluster

---
# Prometheus Rules for Cost Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-monitoring-rules
  namespace: monitoring
data:
  cost-rules.yaml: |
    groups:
    - name: cost_monitoring
      interval: 30s
      rules:
      # CPU Cost Metrics
      - record: node_cpu_hourly_cost
        expr: |
          sum by (node, instance_type) (
            avg_over_time(node_cpu_seconds_total[5m]) * on (node) group_left(instance_type)
            label_replace(kube_node_labels, "node", "$1", "node", "(.*)") *
            on (instance_type) group_left() (
              label_join(
                vector(0.0768), "instance_type", "", "c6i.xlarge"
              ) or label_join(
                vector(0.0384), "instance_type", "", "t3a.medium"
              ) or label_join(
                vector(0.5420), "instance_type", "", "g4dn.xlarge"
              )
            )
          )
      
      # Memory Cost Metrics  
      - record: node_memory_hourly_cost
        expr: |
          sum by (node, instance_type) (
            avg_over_time(node_memory_MemTotal_bytes[5m]) / 1024 / 1024 / 1024 * 
            on (node) group_left(instance_type)
            label_replace(kube_node_labels, "node", "$1", "node", "(.*)") *
            on (instance_type) group_left() (
              label_join(
                vector(0.0096), "instance_type", "", "c6i.xlarge"
              ) or label_join(
                vector(0.0048), "instance_type", "", "t3a.medium"
              ) or label_join(
                vector(0.0096), "instance_type", "", "g4dn.xlarge"
              )
            )
          )
      
      # Namespace Cost Allocation
      - record: namespace_cpu_usage_hourly_cost
        expr: |
          sum by (namespace) (
            sum by (namespace, pod, node) (
              rate(container_cpu_usage_seconds_total{container!="POD"}[5m])
            ) * on (node) group_left()
            node_cpu_hourly_cost
          )
      
      - record: namespace_memory_usage_hourly_cost
        expr: |
          sum by (namespace) (
            sum by (namespace, pod, node) (
              container_memory_working_set_bytes{container!="POD"} / 1024 / 1024 / 1024
            ) * on (node) group_left()
            node_memory_hourly_cost
          )
      
      # Service Cost Metrics
      - record: service_total_hourly_cost
        expr: |
          namespace_cpu_usage_hourly_cost + namespace_memory_usage_hourly_cost
      
      # Spot Instance Savings
      - record: spot_instance_savings_hourly
        expr: |
          sum(
            count by (node) (
              kube_node_labels{label_node_kubernetes_io_lifecycle="spot"}
            ) * 0.1154  # Average savings per spot instance
          )
      
      # Underutilized Resources
      - record: cluster_cpu_utilization
        expr: |
          sum(rate(container_cpu_usage_seconds_total{container!="POD"}[5m])) /
          sum(kube_node_status_allocatable{resource="cpu"})
      
      - record: cluster_memory_utilization
        expr: |
          sum(container_memory_working_set_bytes{container!="POD"}) /
          sum(kube_node_status_allocatable{resource="memory"})
      
      # Waste Metrics
      - record: cpu_request_utilization
        expr: |
          sum by (namespace) (
            rate(container_cpu_usage_seconds_total{container!="POD"}[5m])
          ) / sum by (namespace) (
            kube_pod_container_resource_requests{resource="cpu"}
          )
      
      - record: memory_request_utilization
        expr: |
          sum by (namespace) (
            container_memory_working_set_bytes{container!="POD"}
          ) / sum by (namespace) (
            kube_pod_container_resource_requests{resource="memory"}
          )

---
# Grafana Dashboard for Cost Monitoring
apiVersion: v1
kind: ConfigMap
metadata:
  name: cost-monitoring-dashboard
  namespace: monitoring
data:
  dashboard.json: |
    {
      "dashboard": {
        "title": "BetterPrompts Cost Monitoring",
        "uid": "cost-monitoring",
        "tags": ["cost", "optimization"],
        "panels": [
          {
            "title": "Total Hourly Cost by Namespace",
            "targets": [
              {
                "expr": "service_total_hourly_cost"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 0}
          },
          {
            "title": "Spot Instance Savings",
            "targets": [
              {
                "expr": "spot_instance_savings_hourly"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0}
          },
          {
            "title": "Resource Utilization",
            "targets": [
              {
                "expr": "cluster_cpu_utilization",
                "legendFormat": "CPU"
              },
              {
                "expr": "cluster_memory_utilization",
                "legendFormat": "Memory"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "title": "Resource Waste by Namespace",
            "targets": [
              {
                "expr": "1 - cpu_request_utilization",
                "legendFormat": "CPU Waste - {{namespace}}"
              },
              {
                "expr": "1 - memory_request_utilization",
                "legendFormat": "Memory Waste - {{namespace}}"
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }

---
# AlertManager Rules for Cost Alerts
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: cost-alerts
  namespace: monitoring
spec:
  groups:
  - name: cost_alerts
    interval: 5m
    rules:
    - alert: HighHourlyCost
      expr: sum(service_total_hourly_cost) > 10
      for: 1h
      labels:
        severity: warning
        team: platform
      annotations:
        summary: "High cluster cost detected"
        description: "Cluster hourly cost is {{ $value }} which exceeds threshold"
    
    - alert: LowResourceUtilization
      expr: cluster_cpu_utilization < 0.3 or cluster_memory_utilization < 0.3
      for: 2h
      labels:
        severity: info
        team: platform
      annotations:
        summary: "Low resource utilization"
        description: "Cluster resources are underutilized (CPU: {{ $value }})"
    
    - alert: HighResourceWaste
      expr: (1 - cpu_request_utilization) > 0.5
      for: 1h
      labels:
        severity: warning
        team: platform
      annotations:
        summary: "High resource waste in namespace {{ $labels.namespace }}"
        description: "Over 50% of requested CPU is not being used"
    
    - alert: SpotInstanceTermination
      expr: increase(kube_node_labels{label_node_kubernetes_io_lifecycle="spot"}[5m]) < 0
      for: 1m
      labels:
        severity: info
        team: platform
      annotations:
        summary: "Spot instance terminated"
        description: "A spot instance has been terminated"

---
# KubeCost Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: kubecost-config
  namespace: monitoring
data:
  config.yaml: |
    # AWS Pricing Configuration
    awsSpotDataRegion: us-east-1
    awsSpotDataBucket: aws-spot-pricing
    awsSpotDataPrefix: spot-pricing
    spotLabel: node.kubernetes.io/lifecycle
    spotLabelValue: spot
    
    # On-Demand Pricing (per hour)
    onDemandPricing:
      c6i.xlarge: 0.1920
      t3a.medium: 0.0384
      t3a.large: 0.0768
      g4dn.xlarge: 0.5420
      db.r6g.xlarge: 0.3200
      cache.r6g.large: 0.1600
    
    # Reserved Instance Pricing (1-year, all upfront)
    reservedPricing:
      c6i.xlarge: 0.1344  # 30% discount
      db.r6g.xlarge: 0.2240  # 30% discount
      cache.r6g.large: 0.1120  # 30% discount
    
    # Storage Pricing
    storagePricing:
      gp3: 0.08  # per GB-month
      gp2: 0.10  # per GB-month
      io1: 0.125  # per GB-month
      st1: 0.045  # per GB-month
      sc1: 0.025  # per GB-month
    
    # Network Pricing
    networkPricing:
      internetEgress: 0.09  # per GB
      crossAZ: 0.01  # per GB
      crossRegion: 0.02  # per GB