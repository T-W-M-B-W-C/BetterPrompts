apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: torchserve
  namespace: model-serving
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/limit-rps: "50"
    nginx.ingress.kubernetes.io/cors-enable: "true"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/cors-expose-headers: "Content-Length,Content-Range"
spec:
  tls:
  - hosts:
    - models.betterprompts.com
    secretName: torchserve-tls
  rules:
  - host: models.betterprompts.com
    http:
      paths:
      - path: /predictions
        pathType: Prefix
        backend:
          service:
            name: torchserve
            port:
              number: 8080
      - path: /metrics
        pathType: Prefix
        backend:
          service:
            name: torchserve
            port:
              number: 8082
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: torchserve-management
  namespace: model-serving
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/whitelist-source-range: "10.0.0.0/8,172.16.0.0/12"  # Internal only
spec:
  tls:
  - hosts:
    - models-mgmt.betterprompts.com
    secretName: torchserve-mgmt-tls
  rules:
  - host: models-mgmt.betterprompts.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: torchserve
            port:
              number: 8081